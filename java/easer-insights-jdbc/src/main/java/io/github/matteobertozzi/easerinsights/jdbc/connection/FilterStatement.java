/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.matteobertozzi.easerinsights.jdbc.connection;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class FilterStatement implements Statement {
  private final Statement stmt;

  public FilterStatement(final Statement stmt) {
    this.stmt = stmt;
  }

  @Override
  public <T> T unwrap(final Class<T> iface) throws SQLException {
    return stmt.unwrap(iface);
  }

  @Override
  public boolean isWrapperFor(final Class<?> iface) throws SQLException {
    return stmt.isWrapperFor(iface);
  }

  @Override
  public ResultSet executeQuery(final String sql) throws SQLException {
    return stmt.executeQuery(sql);
  }

  @Override
  public int executeUpdate(final String sql) throws SQLException {
    return stmt.executeUpdate(sql);
  }

  @Override
  public void close() throws SQLException {
    stmt.close();
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    return stmt.getMaxFieldSize();
  }

  @Override
  public void setMaxFieldSize(final int max) throws SQLException {
    stmt.setMaxFieldSize(max);
  }

  @Override
  public int getMaxRows() throws SQLException {
    return stmt.getMaxRows();
  }

  @Override
  public void setMaxRows(final int max) throws SQLException {
    stmt.setMaxRows(max);
  }

  @Override
  public void setEscapeProcessing(final boolean enable) throws SQLException {
    stmt.setEscapeProcessing(enable);
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    return stmt.getQueryTimeout();
  }

  @Override
  public void setQueryTimeout(final int seconds) throws SQLException {
    stmt.setQueryTimeout(seconds);
  }

  @Override
  public void cancel() throws SQLException {
    stmt.cancel();
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    return stmt.getWarnings();
  }

  @Override
  public void clearWarnings() throws SQLException {
    stmt.clearWarnings();
  }

  @Override
  public void setCursorName(final String name) throws SQLException {
    stmt.setCursorName(name);
  }

  @Override
  public boolean execute(final String sql) throws SQLException {
    return stmt.execute(sql);
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    return stmt.getResultSet();
  }

  @Override
  public int getUpdateCount() throws SQLException {
    return stmt.getUpdateCount();
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    return stmt.getMoreResults();
  }

  @Override
  public void setFetchDirection(final int direction) throws SQLException {
    stmt.setFetchDirection(direction);
  }

  @Override
  public int getFetchDirection() throws SQLException {
    return stmt.getFetchDirection();
  }

  @Override
  public void setFetchSize(final int rows) throws SQLException {
    stmt.setFetchSize(rows);
  }

  @Override
  public int getFetchSize() throws SQLException {
    return stmt.getFetchSize();
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    return stmt.getResultSetConcurrency();
  }

  @Override
  public int getResultSetType() throws SQLException {
    return stmt.getResultSetType();
  }

  @Override
  public void addBatch(final String sql) throws SQLException {
    stmt.addBatch(sql);
  }

  @Override
  public void clearBatch() throws SQLException {
    stmt.clearBatch();
  }

  @Override
  public int[] executeBatch() throws SQLException {
    return stmt.executeBatch();
  }

  @Override
  public Connection getConnection() throws SQLException {
    return stmt.getConnection();
  }

  @Override
  public boolean getMoreResults(final int current) throws SQLException {
    return stmt.getMoreResults(current);
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return stmt.getGeneratedKeys();
  }

  @Override
  public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
    return stmt.executeUpdate(sql, autoGeneratedKeys);
  }

  @Override
  public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
    return stmt.executeUpdate(sql, columnIndexes);
  }

  @Override
  public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
    return stmt.executeUpdate(sql, columnNames);
  }

  @Override
  public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
    return stmt.execute(sql, autoGeneratedKeys);
  }

  @Override
  public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
    return stmt.execute(sql, columnIndexes);
  }

  @Override
  public boolean execute(final String sql, final String[] columnNames) throws SQLException {
    return stmt.execute(sql, columnNames);
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return stmt.getResultSetHoldability();
  }

  @Override
  public boolean isClosed() throws SQLException {
    return stmt.isClosed();
  }

  @Override
  public void setPoolable(final boolean poolable) throws SQLException {
    stmt.setPoolable(poolable);
  }

  @Override
  public boolean isPoolable() throws SQLException {
    return stmt.isPoolable();
  }

  @Override
  public void closeOnCompletion() throws SQLException {
    stmt.closeOnCompletion();
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return stmt.isCloseOnCompletion();
  }
}
